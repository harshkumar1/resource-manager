{"version":3,"file":"authentication.service.js","sourceRoot":"","sources":["../../home/hshekhar/projects/spring-boot/client/tmp/broccoli_type_script_compiler-input_base_path-4s3u6VpN.tmp/0/src/app/services/authentication.service.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,qBAA2B,eAAe,CAAC,CAAA;AAC3C,uBAAsB,iBAAiB,CAAC,CAAA;AAExC,qBAA8B,eAAe,CAAC,CAAA;AAG9C,QAAO,6BAA6B,CAAC,CAAA;AAErC;IACE,mBAAmB,QAAgB,EAAS,KAAa,EAAS,QAAe;QAA9D,aAAQ,GAAR,QAAQ,CAAQ;QAAS,UAAK,GAAL,KAAK,CAAQ;QAAS,aAAQ,GAAR,QAAQ,CAAO;IAAG,CAAC;IACvF,gBAAC;AAAD,CAAC,AAFD,IAEC;AAFY,iBAAS,YAErB,CAAA;AAED,IAAI,KAAK,GAAG;IACV,IAAI,SAAS,CAAC,OAAO,EAAE,cAAc,EAAE,WAAW,CAAE;IACpD,IAAI,SAAS,CAAC,UAAU,EAAE,iBAAiB,EAAE,cAAc,CAAE;CAC9D,CAAA;AAGD;IAKE,+BAAoB,OAAe,EAAU,KAAW;QAApC,YAAO,GAAP,OAAO,CAAQ;QAAU,UAAK,GAAL,KAAK,CAAM;QAHxD,UAAK,GAAG,YAAY,CAAC;QACrB,mBAAc,GAAW,KAAK,CAAC;IAE6B,CAAC;IAE7D,sCAAM,GAAN;QACI,YAAY,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;QAChC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;IACrC,CAAC;IAED,qCAAK,GAAL,UAAM,SAAoB;QACxB,IAAI,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC;QACrC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QAClB,IAAI,OAAO,GAAG,IAAI,cAAO,CAAC,EAAC,cAAc,EAAE,kBAAkB,EAAC,CAAC,CAAC;QAChE,IAAI,GAAG,GAAG,2CAA2C,CAAC;QACtD,IAAI,CAAC,KAAK;aACL,IAAI,CAAC,GAAG,EAAE,IAAI,EAAE,OAAO,CAAC;aACxB,SAAS,EAAE;aACX,IAAI,CAAC,UAAA,GAAG;YACP,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC,CAAC;YACxB,GAAG,CAAC,IAAI,EAAE,CAAC,IAAI,CAAC;QAClB,CAAC,CAAC;aACD,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IAC/B,CAAC;IAED,2CAAW,GAAX,UAAY,KAAU;QACpB,OAAO,CAAC,KAAK,CAAC,mBAAmB,EAAE,KAAK,CAAC,CAAC;QAC1C,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,IAAI,KAAK,CAAC,CAAC;IAChD,CAAC;IAED,gDAAgB,GAAhB;QACE,EAAE,CAAC,CAAC,YAAY,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,IAAI,CAAC,CAAA,CAAC;YACvC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;QACrC,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QAC9B,CAAC;IACH,CAAC;IAvCH;QAAC,iBAAU,EAAE;;6BAAA;IAwCb,4BAAC;AAAD,CAAC,AAvCD,IAuCC;AAvCY,6BAAqB,wBAuCjC,CAAA","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Router} from '@angular/router';\nimport { User } from '../models/user.model';\nimport { Http, Headers } from '@angular/http';\n\nimport { Observable }     from 'rxjs/Observable';\nimport 'rxjs/add/operator/toPromise';\n\nexport class LoginInfo {\n  constructor(public username: string, public email: string, public password:string) {}\n}\n\nvar USERS = [\n  new LoginInfo('admin', 'admin@rm.com', 'admin@123' ),\n  new LoginInfo('hshekhar', 'hshekhar@rm.com', 'password@123' )\n]\n\n@Injectable()\nexport class AuthenticationService {\n\n  title = 'app works!';\n  isUserLoggedIn:boolean = false;\n\n  constructor(private _router: Router, private _http: Http) { }\n\n  logout() {\n      localStorage.removeItem(\"user\");\n      this._router.navigate(['login']);\n  }\n\n  login(loginInfo: LoginInfo) {\n    let data = JSON.stringify(loginInfo);\n    console.log(data);\n    let headers = new Headers({'Content-Type': 'application/json'});\n    let url = \"http://localhost:8080/api/v1/authenticate\";\n    this._http\n        .post(url, data, headers)\n        .toPromise()\n        .then(res => {\n          console.log(res.json());\n          res.json().data;\n        })\n        .catch(this.handleError);\n  }\n\n  handleError(error: any) {\n    console.error('An error occurred', error);\n    return Promise.reject(error.message || error);\n  }\n\n  checkCredentials() {\n    if (localStorage.getItem(\"user\") === null){\n        this._router.navigate(['login']);\n    } else {\n      this._router.navigate(['']);\n    }\n  }\n}\n"]}